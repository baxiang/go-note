// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chat.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ChatReq struct {
	Input                string   `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChatReq) Reset()         { *m = ChatReq{} }
func (m *ChatReq) String() string { return proto.CompactTextString(m) }
func (*ChatReq) ProtoMessage()    {}
func (*ChatReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c585a45e2093e54, []int{0}
}

func (m *ChatReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChatReq.Unmarshal(m, b)
}
func (m *ChatReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChatReq.Marshal(b, m, deterministic)
}
func (m *ChatReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatReq.Merge(m, src)
}
func (m *ChatReq) XXX_Size() int {
	return xxx_messageInfo_ChatReq.Size(m)
}
func (m *ChatReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatReq.DiscardUnknown(m)
}

var xxx_messageInfo_ChatReq proto.InternalMessageInfo

func (m *ChatReq) GetInput() string {
	if m != nil {
		return m.Input
	}
	return ""
}

type ChatRes struct {
	Output               string   `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChatRes) Reset()         { *m = ChatRes{} }
func (m *ChatRes) String() string { return proto.CompactTextString(m) }
func (*ChatRes) ProtoMessage()    {}
func (*ChatRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c585a45e2093e54, []int{1}
}

func (m *ChatRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChatRes.Unmarshal(m, b)
}
func (m *ChatRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChatRes.Marshal(b, m, deterministic)
}
func (m *ChatRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatRes.Merge(m, src)
}
func (m *ChatRes) XXX_Size() int {
	return xxx_messageInfo_ChatRes.Size(m)
}
func (m *ChatRes) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatRes.DiscardUnknown(m)
}

var xxx_messageInfo_ChatRes proto.InternalMessageInfo

func (m *ChatRes) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

func init() {
	proto.RegisterType((*ChatReq)(nil), "pb.ChatReq")
	proto.RegisterType((*ChatRes)(nil), "pb.ChatRes")
}

func init() { proto.RegisterFile("chat.proto", fileDescriptor_8c585a45e2093e54) }

var fileDescriptor_8c585a45e2093e54 = []byte{
	// 121 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0xce, 0x48, 0x2c,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x92, 0xe7, 0x62, 0x77, 0xce,
	0x48, 0x2c, 0x09, 0x4a, 0x2d, 0x14, 0x12, 0xe1, 0x62, 0xcd, 0xcc, 0x2b, 0x28, 0x2d, 0x91, 0x60,
	0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0x70, 0x94, 0x14, 0x61, 0x0a, 0x8a, 0x85, 0xc4, 0xb8, 0xd8,
	0xf2, 0x4b, 0x4b, 0x10, 0x2a, 0xa0, 0x3c, 0x23, 0x5d, 0x2e, 0x16, 0x90, 0x12, 0x21, 0x55, 0x2e,
	0x56, 0x8f, 0xd4, 0x9c, 0x9c, 0x7c, 0x21, 0x6e, 0xbd, 0x82, 0x24, 0x3d, 0xa8, 0xb1, 0x52, 0x48,
	0x9c, 0x62, 0x0d, 0x46, 0x03, 0xc6, 0x24, 0x36, 0xb0, 0xed, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x42, 0x25, 0x27, 0x0c, 0x8b, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChatClient is the client API for Chat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChatClient interface {
	//关键字stream指定启用流特性 stream 支持双向流 Send(),Recv()
	Hello(ctx context.Context, opts ...grpc.CallOption) (Chat_HelloClient, error)
}

type chatClient struct {
	cc *grpc.ClientConn
}

func NewChatClient(cc *grpc.ClientConn) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) Hello(ctx context.Context, opts ...grpc.CallOption) (Chat_HelloClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Chat_serviceDesc.Streams[0], "/pb.Chat/Hello", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatHelloClient{stream}
	return x, nil
}

type Chat_HelloClient interface {
	Send(*ChatReq) error
	Recv() (*ChatRes, error)
	grpc.ClientStream
}

type chatHelloClient struct {
	grpc.ClientStream
}

func (x *chatHelloClient) Send(m *ChatReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatHelloClient) Recv() (*ChatRes, error) {
	m := new(ChatRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatServer is the server API for Chat service.
type ChatServer interface {
	//关键字stream指定启用流特性 stream 支持双向流 Send(),Recv()
	Hello(Chat_HelloServer) error
}

func RegisterChatServer(s *grpc.Server, srv ChatServer) {
	s.RegisterService(&_Chat_serviceDesc, srv)
}

func _Chat_Hello_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServer).Hello(&chatHelloServer{stream})
}

type Chat_HelloServer interface {
	Send(*ChatRes) error
	Recv() (*ChatReq, error)
	grpc.ServerStream
}

type chatHelloServer struct {
	grpc.ServerStream
}

func (x *chatHelloServer) Send(m *ChatRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatHelloServer) Recv() (*ChatReq, error) {
	m := new(ChatReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Chat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Chat",
	HandlerType: (*ChatServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Hello",
			Handler:       _Chat_Hello_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "chat.proto",
}
