// Code generated by protoc-gen-go. DO NOT EDIT.
// source: operation.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 算术运算请求结构
type OperaRequest struct {
	A                    int32    `protobuf:"varint,1,opt,name=a,proto3" json:"a,omitempty"`
	B                    int32    `protobuf:"varint,2,opt,name=b,proto3" json:"b,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OperaRequest) Reset()         { *m = OperaRequest{} }
func (m *OperaRequest) String() string { return proto.CompactTextString(m) }
func (*OperaRequest) ProtoMessage()    {}
func (*OperaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_619dee0fded31cb3, []int{0}
}

func (m *OperaRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OperaRequest.Unmarshal(m, b)
}
func (m *OperaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OperaRequest.Marshal(b, m, deterministic)
}
func (m *OperaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperaRequest.Merge(m, src)
}
func (m *OperaRequest) XXX_Size() int {
	return xxx_messageInfo_OperaRequest.Size(m)
}
func (m *OperaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OperaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OperaRequest proto.InternalMessageInfo

func (m *OperaRequest) GetA() int32 {
	if m != nil {
		return m.A
	}
	return 0
}

func (m *OperaRequest) GetB() int32 {
	if m != nil {
		return m.B
	}
	return 0
}

type OperaResponse struct {
	Result               int32    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OperaResponse) Reset()         { *m = OperaResponse{} }
func (m *OperaResponse) String() string { return proto.CompactTextString(m) }
func (*OperaResponse) ProtoMessage()    {}
func (*OperaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_619dee0fded31cb3, []int{1}
}

func (m *OperaResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OperaResponse.Unmarshal(m, b)
}
func (m *OperaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OperaResponse.Marshal(b, m, deterministic)
}
func (m *OperaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperaResponse.Merge(m, src)
}
func (m *OperaResponse) XXX_Size() int {
	return xxx_messageInfo_OperaResponse.Size(m)
}
func (m *OperaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OperaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OperaResponse proto.InternalMessageInfo

func (m *OperaResponse) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func init() {
	proto.RegisterType((*OperaRequest)(nil), "pb.operaRequest")
	proto.RegisterType((*OperaResponse)(nil), "pb.operaResponse")
}

func init() { proto.RegisterFile("operation.proto", fileDescriptor_619dee0fded31cb3) }

var fileDescriptor_619dee0fded31cb3 = []byte{
	// 151 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcf, 0x2f, 0x48, 0x2d,
	0x4a, 0x2c, 0xc9, 0xcc, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52,
	0xd2, 0xe2, 0xe2, 0x01, 0x0b, 0x07, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0xf1, 0x70, 0x31,
	0x26, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0xb0, 0x06, 0x31, 0x26, 0x82, 0x78, 0x49, 0x12, 0x4c, 0x10,
	0x5e, 0x92, 0x92, 0x3a, 0x17, 0x2f, 0x54, 0x6d, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x90, 0x18,
	0x17, 0x5b, 0x51, 0x6a, 0x71, 0x69, 0x4e, 0x09, 0x54, 0x07, 0x94, 0x67, 0x94, 0x06, 0x35, 0x34,
	0x38, 0xb5, 0xa8, 0x2c, 0x33, 0x39, 0x55, 0x48, 0x8b, 0x8b, 0x39, 0x31, 0x25, 0x45, 0x48, 0x40,
	0xaf, 0x20, 0x49, 0x0f, 0xd9, 0x36, 0x29, 0x41, 0x24, 0x11, 0xa8, 0x99, 0x5a, 0x5c, 0xcc, 0xc5,
	0xa5, 0x49, 0x44, 0xa9, 0x4d, 0x62, 0x03, 0xfb, 0xc3, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x33,
	0xd0, 0x6e, 0x57, 0xda, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OperaServiceClient is the client API for OperaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OperaServiceClient interface {
	Add(ctx context.Context, in *OperaRequest, opts ...grpc.CallOption) (*OperaResponse, error)
	Sub(ctx context.Context, in *OperaRequest, opts ...grpc.CallOption) (*OperaResponse, error)
}

type operaServiceClient struct {
	cc *grpc.ClientConn
}

func NewOperaServiceClient(cc *grpc.ClientConn) OperaServiceClient {
	return &operaServiceClient{cc}
}

func (c *operaServiceClient) Add(ctx context.Context, in *OperaRequest, opts ...grpc.CallOption) (*OperaResponse, error) {
	out := new(OperaResponse)
	err := c.cc.Invoke(ctx, "/pb.operaService/add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operaServiceClient) Sub(ctx context.Context, in *OperaRequest, opts ...grpc.CallOption) (*OperaResponse, error) {
	out := new(OperaResponse)
	err := c.cc.Invoke(ctx, "/pb.operaService/sub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OperaServiceServer is the server API for OperaService service.
type OperaServiceServer interface {
	Add(context.Context, *OperaRequest) (*OperaResponse, error)
	Sub(context.Context, *OperaRequest) (*OperaResponse, error)
}

func RegisterOperaServiceServer(s *grpc.Server, srv OperaServiceServer) {
	s.RegisterService(&_OperaService_serviceDesc, srv)
}

func _OperaService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperaServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.operaService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperaServiceServer).Add(ctx, req.(*OperaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperaService_Sub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperaServiceServer).Sub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.operaService/Sub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperaServiceServer).Sub(ctx, req.(*OperaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OperaService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.operaService",
	HandlerType: (*OperaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "add",
			Handler:    _OperaService_Add_Handler,
		},
		{
			MethodName: "sub",
			Handler:    _OperaService_Sub_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "operation.proto",
}
