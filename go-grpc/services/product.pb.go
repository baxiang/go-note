// Code generated by protoc-gen-go. DO NOT EDIT.
// source: product.proto

package services

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ProductReq struct {
	ProdId               int32    `protobuf:"varint,1,opt,name=prod_id,json=prodId,proto3" json:"prod_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProductReq) Reset()         { *m = ProductReq{} }
func (m *ProductReq) String() string { return proto.CompactTextString(m) }
func (*ProductReq) ProtoMessage()    {}
func (*ProductReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0fd8b59378f44a5, []int{0}
}

func (m *ProductReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProductReq.Unmarshal(m, b)
}
func (m *ProductReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProductReq.Marshal(b, m, deterministic)
}
func (m *ProductReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProductReq.Merge(m, src)
}
func (m *ProductReq) XXX_Size() int {
	return xxx_messageInfo_ProductReq.Size(m)
}
func (m *ProductReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ProductReq.DiscardUnknown(m)
}

var xxx_messageInfo_ProductReq proto.InternalMessageInfo

func (m *ProductReq) GetProdId() int32 {
	if m != nil {
		return m.ProdId
	}
	return 0
}

type ProductResp struct {
	ProdStock            int32    `protobuf:"varint,1,opt,name=prod_stock,json=prodStock,proto3" json:"prod_stock,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProductResp) Reset()         { *m = ProductResp{} }
func (m *ProductResp) String() string { return proto.CompactTextString(m) }
func (*ProductResp) ProtoMessage()    {}
func (*ProductResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0fd8b59378f44a5, []int{1}
}

func (m *ProductResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProductResp.Unmarshal(m, b)
}
func (m *ProductResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProductResp.Marshal(b, m, deterministic)
}
func (m *ProductResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProductResp.Merge(m, src)
}
func (m *ProductResp) XXX_Size() int {
	return xxx_messageInfo_ProductResp.Size(m)
}
func (m *ProductResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ProductResp.DiscardUnknown(m)
}

var xxx_messageInfo_ProductResp proto.InternalMessageInfo

func (m *ProductResp) GetProdStock() int32 {
	if m != nil {
		return m.ProdStock
	}
	return 0
}

func init() {
	proto.RegisterType((*ProductReq)(nil), "services.productReq")
	proto.RegisterType((*ProductResp)(nil), "services.productResp")
}

func init() {
	proto.RegisterFile("product.proto", fileDescriptor_f0fd8b59378f44a5)
}

var fileDescriptor_f0fd8b59378f44a5 = []byte{
	// 141 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x28, 0xca, 0x4f,
	0x29, 0x4d, 0x2e, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x28, 0x4e, 0x2d, 0x2a, 0xcb,
	0x4c, 0x4e, 0x2d, 0x56, 0x52, 0xe5, 0xe2, 0x82, 0x4a, 0x05, 0xa5, 0x16, 0x0a, 0x89, 0x73, 0xb1,
	0x83, 0x78, 0xf1, 0x99, 0x29, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xac, 0x41, 0x6c, 0x20, 0xae, 0x67,
	0x8a, 0x92, 0x0e, 0x17, 0x37, 0x5c, 0x59, 0x71, 0x81, 0x90, 0x2c, 0x44, 0x57, 0x7c, 0x71, 0x49,
	0x7e, 0x72, 0x36, 0x54, 0x29, 0x27, 0x48, 0x24, 0x18, 0x24, 0x60, 0xe4, 0x09, 0x37, 0x34, 0xb8,
	0x2c, 0x59, 0xc8, 0x9a, 0x8b, 0xc7, 0x3d, 0xb5, 0x24, 0x00, 0x26, 0x2b, 0x24, 0xa2, 0x07, 0xb3,
	0x5d, 0x0f, 0x61, 0xb5, 0x94, 0x28, 0x16, 0xd1, 0xe2, 0x82, 0x24, 0x36, 0xb0, 0x83, 0x8d, 0x01,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xf5, 0x28, 0xdb, 0x84, 0xc1, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ProductSvcClient is the client API for ProductSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProductSvcClient interface {
	GetProdStock(ctx context.Context, in *ProductReq, opts ...grpc.CallOption) (*ProductResp, error)
}

type productSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewProductSvcClient(cc grpc.ClientConnInterface) ProductSvcClient {
	return &productSvcClient{cc}
}

func (c *productSvcClient) GetProdStock(ctx context.Context, in *ProductReq, opts ...grpc.CallOption) (*ProductResp, error) {
	out := new(ProductResp)
	err := c.cc.Invoke(ctx, "/services.productSvc/GetProdStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductSvcServer is the server API for ProductSvc service.
type ProductSvcServer interface {
	GetProdStock(context.Context, *ProductReq) (*ProductResp, error)
}

// UnimplementedProductSvcServer can be embedded to have forward compatible implementations.
type UnimplementedProductSvcServer struct {
}

func (*UnimplementedProductSvcServer) GetProdStock(ctx context.Context, req *ProductReq) (*ProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProdStock not implemented")
}

func RegisterProductSvcServer(s *grpc.Server, srv ProductSvcServer) {
	s.RegisterService(&_ProductSvc_serviceDesc, srv)
}

func _ProductSvc_GetProdStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductSvcServer).GetProdStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.productSvc/GetProdStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductSvcServer).GetProdStock(ctx, req.(*ProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProductSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "services.productSvc",
	HandlerType: (*ProductSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProdStock",
			Handler:    _ProductSvc_GetProdStock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product.proto",
}
